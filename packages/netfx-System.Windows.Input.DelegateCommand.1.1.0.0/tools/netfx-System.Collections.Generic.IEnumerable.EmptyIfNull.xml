<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
        </member>
        <member name="T:DelegateCommand">
            <summary>
            Generic <see cref="T:System.Windows.Input.ICommand"/> implementation that receives delegates/lambdas 
            for its implementation.
            </summary>
        </member>
        <member name="M:DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes the command with the action to execute when invoked.
            </summary>
        </member>
        <member name="M:DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes the command with the action to execute when invoked 
            and the condition function that determines if execution is available.
            </summary>
        </member>
        <member name="M:DelegateCommand.CanExecute(System.Object)">
            <summary>
            See <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:DelegateCommand.Execute(System.Object)">
            <summary>
            See <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>.
            </summary>
        </member>
        <member name="E:DelegateCommand.CanExecuteChanged">
            <summary>
            See <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.
            </summary>
        </member>
        <member name="T:DelegateCommand`1">
            <summary>
            Generic <see cref="T:System.Windows.Input.ICommand"/> implementation that receives delegates/lambdas 
            for its implementation and has a typed argument for the command.
            </summary>
        </member>
        <member name="M:DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes the command with the action to execute when invoked.
            </summary>
        </member>
        <member name="M:DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes the command with the action to execute when invoked 
            and the condition function that determines if execution is available.
            </summary>
        </member>
        <member name="M:DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            See <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:DelegateCommand`1.Execute(System.Object)">
            <summary>
            See <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>.
            </summary>
        </member>
        <member name="E:DelegateCommand`1.CanExecuteChanged">
            <summary>
            See <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.
            </summary>
        </member>
    </members>
</doc>
